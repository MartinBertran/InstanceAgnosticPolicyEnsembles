# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Functions to compute V-trace off-policy actor critic targets. Pytorch Version by Martin Bertran

For details and theory see:

"IMPALA: Scalable Distributed Deep-RL with
Importance Weighted Actor-Learner Architectures"
by Espeholt, Soyer, Munos et al.

See https://arxiv.org/abs/1802.01561 for the full paper.
"""
import torch
import collections

VTraceFromLogpReturns = collections.namedtuple(
    'VTraceFromLogpReturns',
    ['vs', 'pg_advantages', 'log_rhos',
     'rollout_action_log_probs', 'target_action_log_probs'])


VTraceReturns = collections.namedtuple('VTraceReturns', ['vs', 'pg_advantages'])


def from_logp(
    rollout_action_log_probs, target_action_log_probs,
    actions,dones,
    discounts, rewards, values, bootstrap_value,
    clip_rho_threshold=1.0, clip_pg_rho_threshold=1.0,
    clip_beta_threshold=0.2,
    name='vtrace_from_logits'):
    r"""V-trace for softmax policies.
    
    Calculates V-trace actor critic targets for softmax polices as described in
    
    "IMPALA: Scalable Distributed Deep-RL with
    Importance Weighted Actor-Learner Architectures"
    by Espeholt, Soyer, Munos et al.
    
    Target policy refers to the policy we are interested in improving and
    rollout policy refers to the policy that generated the given
    rewards and actions.
    
    In the notation used throughout documentation and comments, T refers to the
    time dimension ranging from 0 to T-1. B refers to the batch size and
    NUM_ACTIONS refers to the number of actions.
    
    Args:
      rollout_policy_logits: A float32 tensor of shape [T, A, B,???] with
        un-normalized log-probabilities parametrizing the softmax behaviour
        policy.
      target_policy_logits: A float32 tensor of shape [T, A, B, ???] with
        un-normalized log-probabilities parametrizing the softmax target policy.
      actions: An int32 tensor of shape [T, B, ???] of actions sampled from the
        behaviour policy.
      discounts: A float32 tensor of shape [T, B, ???] with the discount encountered
        when following the behaviour policy.
      rewards: A float32 tensor of shape [T, B, ???] with the rewards generated by
        following the behaviour policy.
      values: A float32 tensor of shape [T, B, ???] with the value function estimates
        wrt. the target policy.
      bootstrap_value: A float32 of shape [B, ???] with the value function estimate at
        time T.
      clip_rho_threshold: A scalar float32 tensor with the clipping threshold for
        importance weights (rho) when calculating the baseline targets (vs).
        rho^bar in the paper.
      clip_pg_rho_threshold: A scalar float32 tensor with the clipping threshold
        on rho_s in \rho_s \delta log \pi(a|x) (r + \gamma v_{s+1} - V(x_s)).
      clip_beta_threshold: A scalar float32 tensor with the clipping threshold
        on D_{KL}(\pi || \mu) <\beta
      name: The name scope that all V-trace operations will be created in.
    
    Returns:
      A `VTraceFromLogitsReturns` namedtuple with the following fields:
        vs: A float32 tensor of shape [T, B]. Can be used as target to train a
            baseline (V(x_t) - vs_t)^2.
        pg_advantages: A float 32 tensor of shape [T, B]. Can be used as an
          estimate of the advantage in the calculation of policy gradients.
        log_rhos: A float32 tensor of shape [T, B] containing the log importance
          sampling weights (log rhos).
        behaviour_action_log_probs: A float32 tensor of shape [T, B] containing
          behaviour policy action log probabilities (log \mu(a_t)).
        target_action_log_probs: A float32 tensor of shape [T, B] containing
          target policy action probabilities (log \pi(a_t)).
    """
    with torch.no_grad():
        # rollout_policy_logits = torch.tensor(
        #   rollout_policy_logits)
        # target_policy_logits = torch.tensor(
        #   target_policy_logits)
        # actions = torch.tensor(actions)
        #
        # # # Make sure tensor ranks are as expected.
        # # # The rest will be checked by from_action_log_probs.
        # # rollout_policy_logits.shape.assert_has_rank(3)
        # # target_policy_logits.shape.assert_has_rank(3)
        # # actions.shape.assert_has_rank(2)
        #
        # target_action_log_probs = log_probs_from_logits_and_actions(
        #     target_policy_logits, actions)
        # behaviour_action_log_probs = log_probs_from_logits_and_actions(
        #     rollout_policy_logits, actions)



        # target_action_log_probs = torch.tensor(target_action_log_probs)
        # rollout_action_log_probs = torch.tensor(rollout_action_log_probs)
        log_rhos = target_action_log_probs - rollout_action_log_probs

        vtrace_returns = from_importance_weights(
            log_rhos=log_rhos,
            discounts=discounts,
            rewards=rewards,
            values=values,
            bootstrap_value=bootstrap_value,
            clip_rho_threshold=clip_rho_threshold,
            clip_pg_rho_threshold=clip_pg_rho_threshold,
        )

        return VTraceFromLogpReturns(
            log_rhos=log_rhos,
            rollout_action_log_probs=rollout_action_log_probs,
            target_action_log_probs=target_action_log_probs,
            # behavioural_masks = behavioural_similarity,
            **vtrace_returns._asdict()
        )

def from_importance_weights(
    log_rhos, discounts, rewards, values, bootstrap_value,
    clip_rho_threshold=1.0, clip_pg_rho_threshold=1.0,
    name='vtrace_from_importance_weights'):
    r"""V-trace from log importance weights.

    Calculates V-trace actor critic targets as described in

    "IMPALA: Scalable Distributed Deep-RL with
    Importance Weighted Actor-Learner Architectures"
    by Espeholt, Soyer, Munos et al.

    In the notation used throughout documentation and comments, T refers to the
    time dimension ranging from 0 to T-1. B refers to the batch size and
    NUM_ACTIONS refers to the number of actions. This code also supports the
    case where all tensors have the same number of additional dimensions, e.g.,
    `rewards` is [T, B, C], `values` is [T, B, C], `bootstrap_value` is [B, C].

    Args:
    log_rhos: A float32 tensor of shape [T, B, NUM_ACTIONS] representing the log
      importance sampling weights, i.e.
      log(target_policy(a) / behaviour_policy(a)). V-trace performs operations
      on rhos in log-space for numerical stability.
    discounts: A float32 tensor of shape [T, B] with discounts encountered when
      following the behaviour policy.
    rewards: A float32 tensor of shape [T, B] containing rewards generated by
      following the behaviour policy.
    values: A float32 tensor of shape [T, B] with the value function estimates
      wrt. the target policy.
    bootstrap_value: A float32 of shape [B] with the value function estimate at
      time T.
    clip_rho_threshold: A scalar float32 tensor with the clipping threshold for
      importance weights (rho) when calculating the baseline targets (vs).
      rho^bar in the paper. If None, no clipping is applied.
    clip_pg_rho_threshold: A scalar float32 tensor with the clipping threshold
      on rho_s in \rho_s \delta log \pi(a|x) (r + \gamma v_{s+1} - V(x_s)). If
      None, no clipping is applied.
    name: The name scope that all V-trace operations will be created in.

    Returns:
    A VTraceReturns namedtuple (vs, pg_advantages) where:
      vs: A float32 tensor of shape [T, B]. Can be used as target to
        train a baseline (V(x_t) - vs_t)^2.
      pg_advantages: A float32 tensor of shape [T, B]. Can be used as the
        advantage in the calculation of policy gradients.
    """
    # log_rhos = torch.tensor(log_rhos, dtype=torch.float32)
    # discounts = torch.tensor(discounts, dtype=torch.float32)
    # rewards = torch.tensor(rewards, dtype=torch.float32)
    # values = torch.tensor(values, dtype=torch.float32)
    # bootstrap_value = torch.tensor(bootstrap_value, dtype=torch.float32)
    if clip_rho_threshold is not None:
        clip_rho_threshold = torch.tensor(clip_rho_threshold,
                                                  dtype=torch.float32)
    if clip_pg_rho_threshold is not None:
        clip_pg_rho_threshold = torch.tensor(clip_pg_rho_threshold,
                                                     dtype=torch.float32)



    rhos = torch.exp(log_rhos)
    if clip_rho_threshold is not None:
      clipped_rhos = torch.min(clip_rho_threshold, rhos)
    else:
      clipped_rhos = rhos

    cs = torch.min(clip_rho_threshold, rhos)
    # Append bootstrapped value to get [v1, ..., v_t+1]
    values_t_plus_1 = torch.cat(
        [values[1:], bootstrap_value.unsqueeze(0)], dim=0)
    deltas = clipped_rhos * (rewards + discounts * values_t_plus_1 - values)



    n_T = values.shape[0]
    vs_minus_v_xs = torch.zeros_like(values)
    previous = torch.zeros_like(values[0])
    for t in range(n_T)[::-1]:
        vs_minus_v_xs[t] = deltas[t] + discounts[t] * cs[t] * previous
        previous = vs_minus_v_xs[t]


    #
    # initial_values = torch.zeros_like(bootstrap_value)
    # sequences = (discounts, cs, deltas)
    # # V-trace vs are calculated through a scan from the back to the beginning
    # # of the given trajectory.

    # Add V(x_s) to get v_s.
    vs = vs_minus_v_xs + values

    # Advantage for policy gradient.
    vs_t_plus_1 = torch.cat([
        vs[1:],bootstrap_value.unsqueeze(0)], dim=0)
    if clip_pg_rho_threshold is not None:
      clipped_pg_rhos = torch.min(clip_pg_rho_threshold, rhos)
    else:
      clipped_pg_rhos = rhos
    pg_advantages = (
        clipped_pg_rhos * (rewards + discounts * vs_t_plus_1 - values))



    # Make sure no gradients backpropagated through the returned values.
    return VTraceReturns(vs=vs.detach(),
                         pg_advantages=pg_advantages.detach())

